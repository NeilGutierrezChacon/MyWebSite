/**
 * @File main.js
 * @description Structuring in MCV
 */window.onload=function(){var a={editor:null},b={init:function(){},saveEditor:function(b){a.editor=b},getEditor:function(){return a.editor}},c={init:function(){/* console.log("init controller"); */c.settingNavMenu(),c.initSlider(),c.initEditor(),c.settingNavMenu(),d.init()},deleteProject:function(a){axios.post("/admin/manage-projects/"+a+"/delete",{params:{id:a}}).then(function(a){a.data.delete&&window.location.replace("/admin/manage-projects")}).catch(function(a){console.log(a)})},getCookie:function(a){let b=a+"=",c=decodeURIComponent(document.cookie),d=c.split(";");for(i=0;i<d.length;i++){let a=d[i];for(;" "==a.charAt(0);)a=a.substring(1);if(0==a.indexOf(b))return a.substring(b.length,a.length)}return""},checkCookie:function(a){let b=c.getCookie(a);return""!=b},/**
   * @function preViewImages
   * @description Show a pre view of images upload in a input file type 
   * @param {*} event Evento upload image.
   */preViewImages:function(a){let b=d.getContPreViewImages();if(b){b.innerHTML="";let c=a.target.files;for(let a,e=0;e<c.length;e++)a=new FileReader,a.onload=function(a){// The file's text will be printed here
/* console.log(e.target.result); */let c=d.getInputImage();c&&(c.src=a.target.result);let e=document.createElement("img");e.src=a.target.result,b.appendChild(e)},a.readAsDataURL(c[e])}},/**
   * @function initSlider
   * @description look for all elements with class "swiper-container" 
   * if the element has a "type-slider" attribute the slider starts with 
   * this type otherwise the slider starts with the default settings.
   * Supported type: 3D-coverflow.
   */initSlider:function(){let a=document.getElementsByClassName("swiper-container");Array.from(a).forEach(a=>{let b,c=a.getAttribute("type-slider");switch(c){case"3D-coverflow":b={effect:"coverflow",grabCursor:!0,centeredSlides:!0,centeredSlidesBounds:!0,loop:!0,loopFillGroupWithBlank:!0,slidesPerView:"auto",coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0},pagination:{el:".swiper-pagination"}};break;default:b={slidesPerView:1,spaceBetween:0,centeredSlides:!0,centeredSlidesBounds:!0,breakpoints:{// min width is >= 576px
576:{slidesPerView:"auto",spaceBetween:5}},loop:!0,loopFillGroupWithBlank:!0,autoplay:{delay:2e3},pagination:{el:".swiper-pagination",clickable:!0},navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"}};}new Swiper(a,b)})},/**
   * @function initEditor
   * @description Find the first element with id "Editor" and started a quill editor
   * with default config.
   */initEditor:function(){let a=document.querySelector("#editor");a&&(a=new Quill(a,{modules:{toolbar:[[{header:[1,2,3,4,5,6,!1]}],[{size:["small",!1,"large","huge"]}],// custom dropdown
["bold","italic","underline"],// toggled buttons
[{list:"ordered"},{list:"bullet"}],[{color:[]},{background:[]}],// dropdown with defaults from theme
[{font:[]}],[{align:[]}],["image","blockquote","code-block"]]},placeholder:"Compose an epic...",theme:"snow"}),b.saveEditor(a))},getEditor:function(){return b.getEditor()},/**
   * @function settingNavMenu
   * @description Add the "active" class when the page URL is equal 
   * to the href of the menu item link and removed the "active" class when it is
   * not equal.
   */settingNavMenu:function(){let a=document.querySelector("#nav-menu");if(a){let b=a.getElementsByClassName("nav-item"),c=window.location.pathname.split("/")[1];Array.from(b).forEach(a=>{let b=a.getElementsByClassName("nav-link")[0].getAttribute("href").split("/")[1];b==c?a.classList.add("active"):a.classList.contains("active")&&a.classList.remove("active")})}}},d={init:function(){/* console.log("init view"); */d.eventShowInputNewPassword(),d.showAdminView(),d.eventPaginationBlogNext(),d.eventPaginationBlogPrevious(),d.processDeltaToHtml(),d.loadDeltaToEditor(),d.eventShowBlockList(),d.saveFormWithQuillEditor()},getInputImage:function(){return document.querySelector("#inputImage")},getContPreViewImages:function(){return document.querySelector("#contPreViewImages")},/**
   * @function eventShowInputNewPassword
   * @description show the input to new password
   */eventShowInputNewPassword:function(){let a=document.querySelector("#checkNewPassword");a&&a.addEventListener("click",()=>{let b=document.querySelector("#form-group-new-password");a.checked?(a.value=!1,b.style.display="block"):(a.value=!0,b.style.display="none")})},/**
   * @function processDeltaToHtml
   * @description Find all elements with class "delta", need a value
   * attribute with the content in delta format, create a quill container
   * in the DOM to be pre-processed in html format. If the element has a
   * "delta-summary" class, it will take the text in "blockquote" format
   * and take it as a summary of the content. 
   */processDeltaToHtml:function(){try{let a=document.getElementsByClassName("delta");Array.from(a).forEach(a=>{/* console.log(delta); */if(a.getAttribute("value")){let b=JSON.parse(a.getAttribute("value")),c=document.createElement("div"),d=new Quill(c,{});/* console.log(inputDelta); */if(d.setContents(b.ops),a.classList.contains("delta-summary")){let b=c.getElementsByTagName("blockquote")[0];b&&(a.innerHTML=b.innerHTML)}else a.innerHTML=d.root.innerHTML;a.setAttribute("value","")}})}catch(a){console.log(a)}},/**
   *  @function loadDeltaToEditor
   *  @description Finds all the elements that contain the class "editor"
   *  and if these elements have the class "load-delta" and a "value" attribute
   *  will load the content to the quill text editor in delta format.
   */loadDeltaToEditor:function(){try{let a=document.getElementsByClassName("editor");Array.from(a).forEach(a=>{a.classList.contains("load-delta")&&a.getAttribute("value")&&c.getEditor().setContents(JSON.parse(a.getAttribute("value")))})}catch(a){console.log(a)}},/**
   * @function showAdminView
   * @description Show the "admin" navigation item if you have token
   * authentication.
   */showAdminView:function(){if(c.checkCookie("token")){let a=document.getElementsByClassName("control-admin");Array.from(a).forEach(a=>{a.style.display="block";let b=a.getElementsByClassName("toggle-admin")[0];b.addEventListener("click",()=>{let b=a.getElementsByClassName("menu-admin")[0];b.classList.contains("active")?b.classList.remove("active"):b.classList.add("active")})})}},/**
   * @function saveFormWithQuillEditor
   * @description Load the content of the quill editor in an input tag
   * to send the content with the form.
   */saveFormWithQuillEditor:function(){var a=document.querySelector(".form-quill");a&&(a.onsubmit=function(){var a=document.querySelector("input[name=content]");a.value=JSON.stringify(c.getEditor().getContents())})},eventPaginationBlogNext:function(){let a=document.querySelector("#next");a&&a.addEventListener("click",a=>{a.preventDefault();let b=window.location.pathname,c=b.split("/")[b.split("/").length-1];window.location.replace("/Blog/"+(parseInt(c)+1))})},eventPaginationBlogPrevious:function(){let a=document.querySelector("#previous");a&&a.addEventListener("click",a=>{a.preventDefault();let b=window.location.pathname,c=b.split("/")[b.split("/").length-1];c=parseInt(c)-1,0<c&&window.location.replace("/Blog/"+c)})},/**
   * @function eventShowBlockList
   * @description Search all elements with class "block-list-toggle" and attribute 
   * list-id with id of the list to control, then if the list has an "init_state" 
   * attribute equal to "visible" shows the list otherwise, hide the list and 
   * add block-list-height attribute with your default height, 
   * then add a click event to the toggle item to display or hide the list.
   * 
   */eventShowBlockList:function(){let a=document.querySelectorAll(".block-list-toggle[list-id]");Array.from(a).forEach(a=>{var b=a.getAttribute("list-id"),c=document.querySelector("#"+b);c&&(0<c.clientHeight&&(c.setAttribute("block-list-height",c.clientHeight),"visible"==c.getAttribute("init_state")?(c.style.visibility="visible",c.style.height=c.clientHeight+"px"):(c.style.visibility="hidden",c.style.height="0")),a.addEventListener("click",()=>{let b=a.getElementsByTagName("i")[0],d=c.getAttribute("block-list-height");"hidden"==c.style.visibility||""==c.style.visibility?(c.style.visibility="visible",c.style.height=d+"px",b.classList.remove("fa-caret-down"),b.classList.add("fa-caret-up")):(c.style.visibility="hidden",c.style.height="0",b.classList.remove("fa-caret-up"),b.classList.add("fa-caret-down"))}))})}};/* MODEL */c.init()};
var notUsed={savePost:function(a){axios.post("/admin/save-post",a,{headers:{"Content-Type":"multipart/form-data"}}).then(function(a){console.log(a.data.save),a.data.save&&window.location.replace("/admin/manage-projects")}).catch(function(a){console.log(a)})},eventSaveProcessForm:function(){try{let a=document.getElementsByClassName("btn-save");Array.from(a).forEach(a=>{a.addEventListener("click",function(){var a=new FormData;let b=this.getAttribute("id-form"),c=document.getElementById(b),d=c.getElementsByClassName("process-form");Array.from(d).forEach(b=>{let c=b.getAttribute("name"),d=b.value;b.classList.contains("editor")&&(d=JSON.stringify(controller.getEditor().getContents())),a.append(c,d)}),controller.savePost(a)})})}catch(a){console.log(a)}},eventSendFormLogIn:function(){try{let a=document.getElementById("logIn");a.addEventListener("click",a=>{let b=view.getEmail(),c=view.getPassword();a.preventDefault(),controller.sendFormLogIn(b,c)})}catch(a){console.log(a)}},getEmail:function(){try{return document.getElementById("inputEmail").value}catch(a){console.log(a)}},getPassword:function(){try{return document.getElementById("inputPassword").value}catch(a){console.log(a)}},onChange:function(a){/* let file = event.target.files[0];
        let reader = new FileReader();
        console.log(event.target.files);
        reader.onload = function(e) {
          // The file's text will be printed here
          console.log(e.target.result);
          view.getImage().src = e.target.result;
        };
        reader.readAsDataURL(file);
        view.getImage().img = file; */ /* let files = event.target.files;
        console.log(files);
        view.getImage().files = files; */ /* Preview with of images */let b=view.getContPreViewImages();b.innerHTML="";let c=a.target.files;for(let d,e=0;e<c.length;e++)d=new FileReader,d.onload=function(a){console.log(a.target.result),view.getImage().src=a.target.result;let c=document.createElement("img");c.src=a.target.result,b.appendChild(c)},d.readAsDataURL(c[e])},eventUpdateProject:function(){try{let a=document.getElementById("updateProject");a.addEventListener("click",function(a){a.preventDefault(),console.log(view.getImage().files);let b=new FormData;b.append("id",view.getProjectId()),b.append("title",view.getTitle()),b.append("github",view.getUrlGitHub()),b.append("website",view.getUrlWebSite());for(let c=0;c<view.getImage().files.length;c++)b.append(`images`,view.getImage().files[c]);b.append("description",view.getDescription()),controller.updateProject(b),console.log("Update project")})}catch(a){console.log(a)}},getProjectId:function(){try{return document.getElementById("inputProjectId").value}catch(a){console.log(a)}},getDescription:function(){try{return document.getElementById("inputDescription").value}catch(a){console.log(a)}},getUrlImage:function(){try{return document.getElementById("inputUrlImage").value}catch(a){console.log(a)}},getTitle:function(){try{return document.getElementById("inputTitle").value}catch(a){console.log(a)}},getUrlWebSite:function(){try{return document.getElementById("inputUrlWebSite").value}catch(a){console.log(a)}},getUrlGitHub:function(){try{return document.getElementById("inputUrlGitHub").value}catch(a){console.log(a)}},eventAddProject:function(){try{let a=document.getElementById("addProject");a.addEventListener("click",function(a){a.preventDefault(),console.log(view.getImage().files);let b=new FormData;b.append("title",view.getTitle()),b.append("github",view.getUrlGitHub()),b.append("website",view.getUrlWebSite()),b.append("image",view.getImage().src),b.append("description",view.getDescription()),b.append("images",view.getImage().files),controller.addProject(b),console.log("Add project")})}catch(a){console.log(a)}},addProject:function(a){axios.post("/Admin/AddProject",a,{headers:{"Content-Type":"multipart/form-data"}}).then(function(a){a.data.add&&window.location.replace("/Admin/ManageProjects")}).catch(function(a){console.log(a)})},updateProject:function(a){axios.put("/Admin/EditProject",a,{headers:{"Content-Type":"multipart/form-data"}}).then(function(a){a.data.update&&window.location.replace("/Admin/ManageProjects")}).catch(function(a){console.log(a)})},sendFormLogIn:function(a,b){console.log("-- not used --"),axios.post("/admin",{email:a,password:b}).then(function(a){console.log(a)}).catch(function(a){console.log(a)}).then(function(){// always executed
})}};
//# sourceMappingURL=main.min.js.map
